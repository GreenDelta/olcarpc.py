syntax = "proto3";
package protolca.services;

option java_package = "org.openlca.proto.services";

import public "olca.proto";

message Empty {
}

message Status {
  bool ok = 1;
  string error = 2;
}

message RefStatus {
  bool ok = 1;
  protolca.Ref ref = 2;
  string error = 3;
}

message ActorStatus {
  bool ok = 1;
  protolca.Actor actor = 2;
  string error = 3;
}

message CategoryStatus {
  bool ok = 1;
  protolca.Category category = 2;
  string error = 3;
}

message CurrencyStatus {
  bool ok = 1;
  protolca.Currency currency = 2;
  string error = 3;
}

message DqSystemStatus {
  bool ok = 1;
  protolca.DqSystem dq_system = 2;
  string error = 3;
}

message FlowStatus {
  bool ok = 1;
  protolca.Flow flow = 2;
  string error = 3;
}

message FlowPropertyStatus {
  bool ok = 1;
  protolca.FlowProperty flow_property = 2;
  string error = 3;
}

message ImpactCategoryStatus {
  bool ok = 1;
  protolca.ImpactCategory impact_category = 2;
  string error = 3;
}

message ImpactMethodStatus {
  bool ok = 1;
  protolca.ImpactMethod impact_method = 2;
  string error = 3;
}

message LocationStatus {
  bool ok = 1;
  protolca.Location location = 2;
  string error = 3;
}

message ParameterStatus {
  bool ok = 1;
  protolca.Parameter parameter = 2;
  string error = 3;
}

message ProcessStatus {
  bool ok = 1;
  protolca.Process process = 2;
  string error = 3;
}

message ProductSystemStatus {
  bool ok = 1;
  protolca.ProductSystem product_system = 2;
  string error = 3;
}

message ProjectStatus {
  bool ok = 1;
  protolca.Project project = 2;
  string error = 3;
}

message SocialIndicatorStatus {
  bool ok = 1;
  protolca.SocialIndicator social_indicator = 2;
  string error = 3;
}

message SourceStatus {
  bool ok = 1;
  protolca.Source source = 2;
  string error = 3;
}

message UnitGroupStatus {
  bool ok = 1;
  protolca.UnitGroup unit_group = 2;
  string error = 3;
}

service DataService {

  rpc delete(protolca.Ref) returns (Status);

  // methods for Actor
  rpc actors(Empty) returns (stream protolca.Actor);
  rpc actor(protolca.Ref) returns (ActorStatus);
  rpc put_actor(protolca.Actor) returns (RefStatus);

  // methods for Category
  rpc categories(Empty) returns (stream protolca.Category);
  rpc category(protolca.Ref) returns (CategoryStatus);
  rpc put_category(protolca.Category) returns (RefStatus);

  // methods for Currency
  rpc currencies(Empty) returns (stream protolca.Currency);
  rpc currency(protolca.Ref) returns (CurrencyStatus);
  rpc put_currency(protolca.Currency) returns (RefStatus);

  // methods for DQSystem
  rpc dq_systems(Empty) returns (stream protolca.DqSystem);
  rpc dq_system(protolca.Ref) returns (DqSystemStatus);
  rpc put_dq_system(protolca.DqSystem) returns (RefStatus);

  // methods for Flow
  rpc flows(Empty) returns (stream protolca.Flow);
  rpc flow(protolca.Ref) returns (FlowStatus);
  rpc put_flow(protolca.Flow) returns (RefStatus);

  // methods for FlowProperty
  rpc flow_properties(Empty) returns (stream protolca.FlowProperty);
  rpc flow_property(protolca.Ref) returns (FlowPropertyStatus);
  rpc put_flow_property(protolca.FlowProperty) returns (RefStatus);

  // methods for ImpactCategory
  rpc impact_categories(Empty) returns (stream protolca.ImpactCategory);
  rpc impact_category(protolca.Ref) returns (ImpactCategoryStatus);
  rpc put_impact_category(protolca.ImpactCategory) returns (RefStatus);

  // methods for ImpactMethod
  rpc impact_methods(Empty) returns (stream protolca.ImpactMethod);
  rpc impact_method(protolca.Ref) returns (ImpactMethodStatus);
  rpc put_impact_method(protolca.ImpactMethod) returns (RefStatus);

  // methods for Location
  rpc locations(Empty) returns (stream protolca.Location);
  rpc location(protolca.Ref) returns (LocationStatus);
  rpc put_location(protolca.Location) returns (RefStatus);

  // methods for Parameter
  rpc parameters(Empty) returns (stream protolca.Parameter);
  rpc parameter(protolca.Ref) returns (ParameterStatus);
  rpc put_parameter(protolca.Parameter) returns (RefStatus);

  // methods for Process
  rpc processes(Empty) returns (stream protolca.Process);
  rpc process(protolca.Ref) returns (ProcessStatus);
  rpc put_process(protolca.Process) returns (RefStatus);

  // methods for ProductSystem
  rpc product_systems(Empty) returns (stream protolca.ProductSystem);
  rpc product_system(protolca.Ref) returns (ProductSystemStatus);
  rpc put_product_system(protolca.ProductSystem) returns (RefStatus);

  // methods for Project
  rpc projects(Empty) returns (stream protolca.Project);
  rpc project(protolca.Ref) returns (ProjectStatus);
  rpc put_project(protolca.Project) returns (RefStatus);

  // methods for SocialIndicator
  rpc social_indicators(Empty) returns (stream protolca.SocialIndicator);
  rpc social_indicator(protolca.Ref) returns (SocialIndicatorStatus);
  rpc put_social_indicator(protolca.SocialIndicator) returns (RefStatus);

  // methods for Source
  rpc sources(Empty) returns (stream protolca.Source);
  rpc source(protolca.Ref) returns (SourceStatus);
  rpc put_source(protolca.Source) returns (RefStatus);

  // methods for UnitGroup
  rpc unit_groups(Empty) returns (stream protolca.UnitGroup);
  rpc unit_group(protolca.Ref) returns (UnitGroupStatus);
  rpc put_unit_group(protolca.UnitGroup) returns (RefStatus);
}
